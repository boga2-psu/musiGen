%import common.INT -> INT
%import common.WS
%ignore WS


?expr: expr ";" if_expr -> seq
     | song_expr
     | if_expr

?if_expr: "if" expr "then" expr "else" or_expr -> if_expr
         | ID ":=" or_expr -> assign
         | "show" expr -> show
         | or_expr

?or_expr: or_expr "||" and_expr -> or
        | and_expr

?and_expr: and_expr "&&" not_expr -> and
         | not_expr

?not_expr: "!" not_expr -> not
         | cmp_expr

?cmp_expr: cmp_expr "==" sum_expr -> eq
         | cmp_expr "<" sum_expr -> lt
         | sum_expr

?sum_expr: sum_expr "+" term -> add
         | sum_expr "-" term -> sub
         | term

?term: term "*" factor -> mul
     | term "/" factor -> div
     | factor

?factor: "-" factor -> neg
       | application

?application: atom "(" expr ")" -> app
           | atom

?atom: ID -> id
     | INT -> int
     | "read" -> read
     | TRUE -> bool
     | FALSE -> bool
     | "(" expr ")" -> parenthesized
     | let_expr
     | letfun_expr

?let_expr: "let" ID "=" expr "in" expr "end" -> let
?letfun_expr: "letfun" ID "(" ID ")" "=" expr "in" expr "end" -> letfun

?song_expr: play

?play: "<=" chorus "=>" -> play
     | chorus

?chorus: "**" repeat -> chorus
       | repeat

?repeat: append "@" (DURATION | "(" expr ")") -> repeat
       | append

?append: append "++" melody_expr -> append
       | melody_expr

?melody_expr: "melody" "(" melody_item ("," melody_item)* ")" -> melody

melody_item: NOTE (DURATION | "(" expr ")")

NOTE: /[A-G](#|b)?/ | "R"
DURATION: /[1-9][0-9]*/
TRUE: "true"
FALSE: "false"
ID: /(?!true|false|read)[a-zA-Z_][a-zA-Z0-9_]*/